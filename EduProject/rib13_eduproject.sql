-- phpMyAdmin SQL Dump
-- version 4.9.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: May 05, 2022 at 10:26 PM
-- Server version: 5.7.38
-- PHP Version: 7.4.29

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `rib13_eduproject`
--

-- --------------------------------------------------------

--
-- Table structure for table `accounts_details`
--

CREATE TABLE `accounts_details` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `experience` int(11) DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `accounts_details`
--

INSERT INTO `accounts_details` (`id`, `username`, `password`, `experience`) VALUES
(32, 'bluegreen', '$2y$10$O2z6gIZ3KIcxPWkjtIrhcOZN5g9K7X.eeOK6stq8vDq0OGBYuCOEO', 0),
(31, 'eggplant', '$2y$10$ufgFQcrIjhJSRYKRdvkc3uWqgUs0ESy2Y2hHKNbQoeY/qdNxni4mG', 250),
(30, 'coffeecake', '$2y$10$i8zFCXVL2yv3rE6HcI.sXeJI.hL7tPGcNCYFF8i//KPmResPzE2UW', 90),
(29, 'Brownrice', '$2y$10$rXLOb.3hd0zSnrvrw2z0cOcyWxxf36I0e69l5boKyu0P7.oIUAvnW', 150),
(28, 'BroccoliBat', '$2y$10$WcnU5OcDSWgs26kB8JrP/OARvlVj5wBEOosK3cX3VKdJKoifiT1M2', 10),
(27, 'Radish', '$2y$10$dC3vT5EzIwBq8itdIomzg.J62rb3Jt.oNhzRbCf20uKfKyVSN/CCy', 60),
(26, 'pearcat', '$2y$10$ryW6HE44Q0d1XncOcO3El.UfnTCYti8vcFegygwIYyG7kTENWBu86', 730),
(25, 'robert', '$2y$10$zrY4E4gyDMCfeHPLK8XPhOcR8HMjqXBUjqBxGuH0dcXZsLWsiFp0m', 470);

-- --------------------------------------------------------

--
-- Table structure for table `accounts_progress`
--

CREATE TABLE `accounts_progress` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `webdev_html_done` int(1) NOT NULL DEFAULT '0',
  `webdev_css_done` int(1) NOT NULL DEFAULT '0',
  `webdev_javascript_done` int(1) NOT NULL DEFAULT '0',
  `webdev_quiz_done` int(1) NOT NULL DEFAULT '0',
  `java_intro_done` int(1) NOT NULL DEFAULT '0',
  `java_fundamentals_done` int(1) NOT NULL DEFAULT '0',
  `java_quiz_done` int(1) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `accounts_progress`
--

INSERT INTO `accounts_progress` (`id`, `username`, `webdev_html_done`, `webdev_css_done`, `webdev_javascript_done`, `webdev_quiz_done`, `java_intro_done`, `java_fundamentals_done`, `java_quiz_done`) VALUES
(12, 'robert', 1, 1, 1, 1, 1, 1, 1),
(13, 'pearcat', 1, 0, 1, 1, 0, 0, 1),
(14, 'Radish', 0, 1, 1, 0, 1, 1, 0),
(15, 'BroccoliBat', 0, 1, 1, 0, 0, 0, 0),
(16, 'Brownrice', 0, 1, 0, 0, 0, 0, 0),
(17, 'coffeecake', 0, 0, 1, 0, 0, 1, 0),
(18, 'eggplant', 1, 1, 0, 1, 1, 0, 1),
(19, 'bluegreen', 0, 0, 0, 0, 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `admin_details`
--

CREATE TABLE `admin_details` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `admin_details`
--

INSERT INTO `admin_details` (`id`, `username`, `password`) VALUES
(4, 'adminuser', '$2y$10$4iw6s61rxERxjC6g8HJwJ.WrtbFiHQhX3EDTYhDKpiz5vkKrKC3/u'),
(3, 'admin', '$2y$10$cWL.BMIF/iI5DiJYsnghPu0SHPlt6IzcElE5s/8q5cDP1jg.k6lx2'),
(5, 'admin1', '$2y$10$hJ6Uvt5DyCgIGmq6jrB8n.C9KZO.94Ns6or5qNmu4VKI9t1uQADo2');

-- --------------------------------------------------------

--
-- Table structure for table `content`
--

CREATE TABLE `content` (
  `id` int(11) NOT NULL,
  `module` text NOT NULL,
  `section_number` text NOT NULL,
  `section_text` text NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `content`
--

INSERT INTO `content` (`id`, `module`, `section_number`, `section_text`) VALUES
(1, 'webdev', '1', '<div class=\"white-box\">\r\n    <h2>Before we begin...</h2>\r\n    <p>\r\n        We need to start at the very beginning of it all: the World Wide Web!\r\n    </p>\r\n    <p>\r\n        Tim Berners-Lee, an English scientist, co-invented the World Wide Web in 1989 with Robert Cailliau. He wrote the first web browser in 1990 while employed at The European Organization for Nuclear Research (CERN). The World Wide Web was originally created\r\n        for sharing scientific documents across networks, and was further distributed to other research institutions in January 1991. In a move which changed the world forever, it was then released to the public in August 1991.\r\n    </p>\r\n    <p>\r\n        After 1993 when the World Wide Web came into everyday use, web browsers needed their own standards to manage the quality of the web. In September 1994, Berners-Lee founded the World Wide Web Consortium, commonly known as\r\n        <span class=\"custom-bold\">W3C</span>, to produce standards and suggestions to enhance the web\'s quality and secure its interoperability. The W3C decided that these standards and suggestions must be established on royalty-free technology for them\r\n        to be implemented by anyone. Web standards detail the <span class=\"custom-italic\">syntax</span> (structure and rules of use) and <span class=\"custom-italic\">semantics</span> (meaning) of markup languages like HTML, XML, and XHTML.\r\n    </p>\r\n    <p>\r\n        Writing web pages in a standards-compliant fashion was beneficial for everyone as:\r\n    </p>\r\n    <ul>\r\n        <li>\r\n            A website can be shown consistently on any standards-compliant browser and device.\r\n        </li>\r\n        <li>\r\n            Code is easier to understand and adjust, saving time and money.\r\n        </li>\r\n        <li>\r\n            People using older browsers can still access web page content.\r\n        </li>\r\n    </ul>\r\n    <p>Now that we have covered the history of the World Wide Web, we can dive straight down into what makes web pages, well, web pages! <span class=\"custom-bold\">Click on a section below to open it up and begin your journey!</span> Don\'t forget to\r\n        <span class=\"custom-bold\">take the quiz</span> to test your knowledge!</p>\r\n</div>'),
(2, 'webdev', '2', '<button type=\"button\" class=\"clickableSection\">HTML &#8595;</button>\r\n<div class=\"content\">\r\n    <div class=\"segment\">\r\n        <p>\r\n            For HTML, we will explore various aspects which include:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                What HTML is\r\n            </li>\r\n            <li>\r\n                Why developers separate content and presentation\r\n            </li>\r\n            <li>\r\n                Important terminology\r\n            </li>\r\n            <li>\r\n                HTML syntax\r\n            </li>\r\n            <li>\r\n                The flow of an HTML document\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            What is HTML?\r\n        </h3>\r\n        <p>\r\n            HyperText Markup Language, commonly referred to by the acronym <span class=\"custom-bold\">HTML</span>, is the markup language for web browser documents and <span class=\"custom-bold\">defines</span> the web page\'s <span class=\"custom-bold\">structure</span>.\r\n            Web browsers grab HTML documents from a web server or local storage and renders those documents into web pages! HTML pages are built from elements, and the sequences of these elements describe how to display (but not present) the content to\r\n            the browser. That is the purpose of web browsers such as Chrome, Edge, and FireFox, rendering HTML documents and displaying them!\r\n        </p>\r\n        <p>\r\n            HTML can use scripts that have been written in a scripting language like JavaScript to manipulate and affect what is on, and happens in, the web page. It can also use style sheets written in a language like Cascading Style Sheets (CSS) to define the look\r\n            and layout of a certain web page!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Separation of content and presentation\r\n        </h3>\r\n        <p>\r\n            Going by the best standards and practises, content and presentation should be separated! HTML markup defines the web page\'s content\'s structure and should not be utilised to define the web page\'s presentation as this is considered outdated and bad practice.\r\n            These outdated presentational tags are no longer used, and here are some examples:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-code\">&lt;center&gt;</span> to centre text\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">&lt;font&gt;</span> to change the font\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">&lt;u&gt;</span> to underline text\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            While browsers still recognise these outdated tags, this is so they can be backwards compatible to adhere to web standards and display these websites as intended. As said before, the language which specifies how content should be presented by a browser\r\n            is\r\n            <span class=\"custom-bold\">CSS</span> which will be covered in a bit! The World Wide Web Consortium (W3C), the former maintainer of the HTML and current maintainer of the CSS standards, has encouraged the use of CSS over HTML for presentation\r\n            since 1997.\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            The lingo!\r\n        </h3>\r\n        <p>\r\n            HTML <span class=\"custom-bold\">elements</span>, as slightly covered before, are the components of HTML web pages. If a web page is a LEGO set, then HTML elements would be the individual LEGO pieces that create the set! There are two types\r\n            of elements,\r\n            <span class=\"custom-bold\">block</span> elements such as headings and paragraphs, and <span class=\"custom-bold\">inline</span> elements such as the italicise <span class=\"custom-code\">&lt;em&gt;</span> tag and bold <span class=\"custom-code\">&lt;strong&gt;</span>            tag (these are nested within block elements). Developers create these elements through <span class=\"custom-bold\">tags</span>, and there is an expansive variety of them! There are tags for things such as:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Headings - <span class=\"custom-code\">&lt;h1&gt;The largest heading!&lt;/h1&gt;</span> <span class=\"custom-code\">&lt;h2&gt;The second largest heading!&lt;/h2&gt;</span> <span class=\"custom-code\">&lt;h3&gt;...</span>\r\n            </li>\r\n            <li>\r\n                Links - <span class=\"custom-code\">&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;</span>\r\n            </li>\r\n            <li>\r\n                Lists - <span class=\"custom-code\">&lt;ol&gt;</span> for a numbered (ordered) list and <span class=\"custom-code\">&lt;ul&gt;</span> for an unnumbered (unordered) list!\r\n            </li>\r\n            <li>\r\n                Paragraphs - <span class=\"custom-code\">&lt;p&gt;Some text!&lt;/p&gt;</span>\r\n            </li>\r\n            <li>\r\n                Quotes - <span class=\"custom-code\">&lt;q&gt;\"A quote from a reputable source!\"&lt;/q&gt;</span>\r\n            </li>\r\n            <li>\r\n                Scripts - <span class=\"custom-code\">&lt;script src=\"js/index.js\"&gt;&lt;/script&gt;</span>\r\n            </li>\r\n            <li>\r\n                Titles - <span class=\"custom-code\">&lt;title&gt;A title!&lt;/title&gt;</span>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"blue-box\">\r\n            <p class=\"blue-box-text\">Try elements yourself!</p>\r\n            <p>\r\n                <select id=\"dropdownH\">\r\n                <option value=\"h1\">&lt;h1&gt;</option>\r\n                <option value=\"h2\">&lt;h2&gt;</option>\r\n                <option value=\"h3\">&lt;h3&gt;</option>\r\n                <option value=\"h4\">&lt;h4&gt;</option>\r\n                <option value=\"h5\">&lt;h5&gt;</option>\r\n                <option value=\"h6\">&lt;h6&gt;</option>\r\n            </select> A heading!\r\n                <span id=\"dropdownHText\">&lt;/h1&gt;</span>\r\n            </p>\r\n\r\n            <p>\r\n                <select id=\"dropdownLinks\">\r\n                <option value=\"link\">&lt;link</option>\r\n                <option value=\"script\">&lt;script</option>\r\n            </select>\r\n                <span id=\"dropdownLinksText\">rel=\"stylesheet\" href=\"style.css\" /></span>\r\n            </p>\r\n\r\n            <p>\r\n                <select id=\"dropdownDivSpan\">\r\n                <option value=\"div\">&lt;div&gt;</option>\r\n                <option value=\"span\">&lt;span&gt;</option>\r\n            </select> A div or span?!\r\n                <span id=\"dropdownDivSpanText\">&lt;/div&gt;</span>\r\n            </p>\r\n        </div>\r\n\r\n        <p>\r\n            As you can see, all HTML elements are defined through these tags which are enclosed in pointy brackets. Some specific tags like an image <span class=\"custom-code\">&lt;img /&gt;</span> tag place content onto the web page using a source file,\r\n            while some tags do not use content and are self-closing tags, like the line break <span class=\"custom-code\">&lt;br&gt;</span>/<span class=\"custom-code\">&lt;br /&gt;</span> tag!\r\n        </p>\r\n        <p>\r\n            Let\'s dissect an element to better understand the layout of tags. For this, we will use the example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;a href=\"eduproject.html\"&gt;Let\'s go to EduProject!&lt;/a&gt;</span>\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-code\">&lt;a&gt;</span> is an HTML <span class=\"custom-bold\">tag</span>, meaning it is an <span class=\"custom-bold\">a</span>nchor to markup our link.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">href</span> is an attribute of the anchor tag. This is the <span class=\"custom-bold\">h</span>ypertext <span class=\"custom-bold\">ref</span>erence of our linked destination.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">\'Let\'s go to EduProject!\'</span> is the attribute\'s value.\r\n            </li>\r\n            <li>\r\n                The entire line, including the markup and content, is an <span class=\"custom-bold\">element</span>.\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Serious syntax!\r\n        </h3>\r\n        <p>\r\n            Your web pages must have the HTML5 doctype. This is <span class=\"custom-bold\">not</span> an HTML tag but is information to the browser about what the document type is. For HTML 5, the current and last major HTML version that the W3C recommends,\r\n            the declaration is:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;!DOCTYPE html&gt;</span>\r\n        </p>\r\n        <p>\r\n            Here is a template for you to use, free of charge!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;!DOCTYPE html&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;html&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;body&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;h1&gt;EduProject HTML template&lt;/h1&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;p&gt;...&lt;/p&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;/body&gt;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;/html&gt;</span>\r\n        </p>\r\n        <p>\r\n            Before HTML5, developed would use division <span class=\"custom-code\">&lt;div&gt;</span> tags when structuring content. With HTML5 however, developers can use specific tags to structure their content rather than generic division tags for everything!\r\n            These would be <span class=\"custom-code\">&lt;header&gt;</span>, <span class=\"custom-code\">&lt;main&gt;</span>,\r\n            <span class=\"custom-code\">&lt;article&gt;</span>, <span class=\"custom-code\">&lt;section&gt;</span>, <span class=\"custom-code\">&lt;footer&gt;</span>, and much more!\r\n        </p>\r\n        <div class=\"blue-box\">\r\n            <p class=\"blue-box-text\">Try them yourself!</p>\r\n            <p>\r\n                <select id=\"dropdownDivision\">\r\n                <option value=\"header\">&lt;header&gt;</option>\r\n                <option value=\"main\">&lt;main&gt;</option>\r\n                <option value=\"article\">&lt;article&gt;</option>\r\n                <option value=\"section\">&lt;section&gt;</option>\r\n                <option value=\"footer\">&lt;footer&gt;</option>\r\n            </select>\r\n                <span id=\"dropdownDivisionText\">The header, a container for introductory content!&lt;/header&gt;</span>\r\n            </p>\r\n        </div>\r\n        <p>\r\n            There is some essential information to note though. HTML5 has a <span class=\"custom-bold\">lax</span> syntax as it is backwards compatible with previous versions of HTML. For my examples, I used XHTML 1.0 <span class=\"custom-bold\">strict</span>            syntax. This is where:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Attribute values have to be written in quotes\r\n                <li>\r\n                    Elements must be nested correctly\r\n                </li>\r\n                <li>\r\n                    Tags and attribute names have to be written in lower case\r\n                </li>\r\n                <li>\r\n                    Tags have to be closed - <span class=\"custom-code\">&lt;title&gt;A title!&lt;/title&gt;</span>\r\n                </li>\r\n        </ul>\r\n        <p>\r\n            While the browser will most likely render your web page even if you do not use strict syntax, it is paramount for creating proper, coherent code!\r\n        </p>\r\n    </div>\r\n</div>'),
(3, 'webdev', '3', '<button type=\"button\" class=\"clickableSection\">CSS &#8595;</button>\r\n<div class=\"content\">\r\n    <div class=\"segment\">\r\n        <p>\r\n            For CSS, we will cover:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                What CSS is\r\n            </li>\r\n            <li>\r\n                Using an external style sheet\r\n            </li>\r\n            <li>\r\n                CSS rules\r\n            </li>\r\n            <li>\r\n                Selectors\r\n            </li>\r\n            <li>\r\n                Responsive web pages\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            CSS? What\'s that?\r\n        </h3>\r\n        <p>\r\n            Cascading Style Sheets, better known by the acronym <span class=\"custom-bold\">CSS</span>, is a style sheet language that is used to control a web document\'s presentation written markup languages like HTML. This has been developed by the W3C\r\n            since 1996. CSS was intended to promote the separation of presentation and content (as we covered before!). This was a vital advancement in the web world as it offered developers the flexibility to manipulate their web pages presentation within\r\n            a designated file. This also let developers use specific styles on numerous different pages far more efficiently as presentation being defined in an external style sheet makes it easier and faster to link and edit.\r\n        </p>\r\n        <p>\r\n            The latest version of CSS is <span class=\"custom-bold\">CSS3</span>. This version gave developers the toolbox needed to style their web pages in ways that could only be previously achieved with something like <span class=\"custom-italic\">JavaScript</span>            (we will cover this later!). Some notable additions were:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Animations\r\n            </li>\r\n            <li>\r\n                border-radius\r\n            </li>\r\n            <li>\r\n                Gradients\r\n            </li>\r\n            <li>\r\n                Importing web fonts\r\n            </li>\r\n            <li>\r\n                Opacity\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            While older browsers do not support some of CSS3\'s new properties, you should still use them! Even if the property cannot be displayed, a fallback can be used in its place. For example, if your web font cannot be used, then the browser will use a standard\r\n            Serif or Sans-serif font as a replacement!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Internally external\r\n        </h3>\r\n        <p>\r\n            As stated previously in the HTML section, following the best standards and practices calls for the separation of the content and presentation! As CSS defines the web page\'s presentation, the best practice is to separate the style from the HTML and have\r\n            all style in an external CSS file that is linked to your web page with a link <span class=\"custom-code\">&lt;link&gt;</span> element located in the document head. All you need to do is:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;</span>\r\n        </p>\r\n        <p>\r\n            And voila! Your CSS sheet Is linked! The <span class=\"custom-italic\">href</span> attribute points to the file of your style sheet and the <span class=\"custom-italic\">rel</span> attribute identifies the relationship between the document and\r\n            the file being pointed to.\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Stick to the rules!\r\n        </h3>\r\n        <p>\r\n            So, a style sheet has <span class=\"custom-italic\">rules</span> which are made of a <span class=\"custom-italic\">selector</span> and a <span class=\"custom-italic\">declaration</span>. These rules tell the browser how it should show HTML elements.\r\n            The <span class=\"custom-italic\">selector</span> targets an HTML element while the <span class=\"custom-italic\">declaration</span> says how that element will be presented. A declaration is made of two components:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                a <span class=\"custom-italic\">property</span>, which is an aspect of an HTML element that can be changed. This can be the colour, size, animation timing, and so forth.\r\n            </li>\r\n            <li>\r\n                a property <span class=\"custom-italic\">value</span>, like colour (<span class=\"css-colour-example\">#bd00ad</span>) or size (1rem).\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            If you have numerous declarations, then you separate them with semicolons <span class=\"custom-code\">;</span>. Declaration blocks are enclosed within curly brackets <span class=\"custom-code\">{}</span>. The syntax of CSS is not complicated but\r\n            there are many properties to remember and all must be error-free to avoid breaking your web page\'s presentation!\r\n        </p>\r\n        <p>\r\n            Here is an example of a CSS rule:\r\n        </p>\r\n        <p><span class=\"custom-code\">p {</span></p>\r\n        <p><span class=\"custom-code\">&emsp;&emsp;font-size: 1.5rem;</span></p>\r\n        <p><span class=\"custom-code\">&emsp;&emsp;margin-top: 50px;</span></p>\r\n        <p><span class=\"custom-code\">}</span></p>\r\n        <div class=\"blue-box\">\r\n            <p class=\"blue-box-text\">Try CSS rules yourself!</p>\r\n            <p>\r\n                <p><span class=\"custom-code\">            \r\n                            <select>\r\n                        <option value=\"p\">p</option>\r\n                        <option value=\"h1\">h1</option>\r\n                        <option value=\"h2\">h2</option>\r\n                        <option value=\"body\">body</option>\r\n                        <option value=\"*\">*</option>\r\n                    </select> {</span>\r\n                </p>\r\n                <p><span class=\"custom-code\">&emsp;&emsp;font-size: <input type=\"text\" size=\"3\">px;</span></p>\r\n                <p>\r\n                    <span class=\"custom-code\">&emsp;&emsp;margin-<select>\r\n                        <option value=\"top\">top</option>\r\n                        <option value=\"left\">left</option>\r\n                        <option value=\"bottom\">bottom</option>\r\n                        <option value=\"right\">right</option>\r\n                    </select>: <input type=\"text\" size=\"3\">px;</span>\r\n                </p>\r\n                <p><span class=\"custom-code\">}</span></p>\r\n            </p>\r\n        </div>\r\n        <p>\r\n            There is some <span class=\"custom-italic\">inheritance</span> with CSS rules. Inheritance is where a child rule will use the property values from a parent rule, such as <span class=\"custom-code\">p</span> using the values from <span class=\"custom-code\">body</span>.\r\n            There are two types of inheritance for CSS rules:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                inherited properties, where child values <span class=\"custom-italic\">use their parent element\'s</span> values.\r\n            </li>\r\n            <li>\r\n                non-inherited properties, where child values are <span class=\"custom-italic\">set to the default</span> property value.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Every HTML element is a \'child\' of the body element as all are nested inside it. Therefore, they will inherit the body\'s properties unless the developer writes an element rule with properties that take precedence over the body\'s properties. This is useful\r\n            as developers can avoid rewriting duplicating code, making it easier to change and test code!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Selectors selecting stuff!\r\n        </h3>\r\n        <p>\r\n            Building on from the rules section is how to specifically target certain HTML elements and give them unique properties! There are many selector types, but we will focus on <span class=\"custom-italic\">id</span> and\r\n            <span class=\"custom-italic\">class</span> selectors!\r\n        </p>\r\n        <h4>\r\n            id\r\n        </h4>\r\n        <p>\r\n            The <span class=\"custom-italic\">id selector</span> targets a specific HTML element by using the id attribute, such as <span class=\"custom-code\">id=\"EduProject\"</span>. It is important to note that an id attribute\'s value has to be unique,\r\n            so the id selector can only be used once per unique element in an HTML document! In CSS, a hash <span class=\"custom-code\">#</span> character is used to select an element with a specific id:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">#eduproject {...}</span>\r\n        </p>\r\n        <h4>\r\n            class\r\n        </h4>\r\n        <p>\r\n            The <span class=\"custom-italic\">class</span> selector targets HTML elements using a particular class attribute, such as <span class=\"custom-code\">class=\"EduProject\"</span>. It is important to note that a class attribute can be used numerous\r\n            times! In CSS, a full stop <span class=\"custom-code\">.</span> character is used to select elements using a specific class:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">.eduproject {...}</span>\r\n        </p>\r\n        <p>\r\n            You can also distinguish specific HTML elements to be affected by a class:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">p.eduproject {...}</span>\r\n        </p>\r\n    </div>\r\n    <div class=\"blue-box\">\r\n        <p class=\"blue-box-text\">Try selectors yourself!</p>\r\n        <p>\r\n            <select id=\"dropdownClassId\">\r\n            <option value=\"class\">.</option>\r\n            <option value=\"id\">#</option>\r\n        </select><input type=\"text\" placeholder=\"Enter an element!\" size=\"15\"> { . . . }\r\n            <p id=\"dropdownClassIdText\">You are editing a class!</p>\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Making the web responsive!\r\n        </h3>\r\n        <p>\r\n            The quick growth of mobile devices accessing the web caused websites to have an overhaul in their development and design. When developing a website, developers cannot know exactly how their end users are accessing their website or their screen size, whether\r\n            that is on desktop, mobile, or on other devices. It is paramount to create an enjoyable user experience for all, but it is not practical nor economical to develop numerous amounts of the same website for different devices!\r\n        </p>\r\n        <p>\r\n            The most economical, efficient outcome was for developers to create <span class=\"custom-bold\">one</span> website which was accessible by a multitude of devices that <span class=\"custom-italic\">adapted</span> to the device it is shown on. This\r\n            is known as <span class=\"custom-italic\">responsive web design</span>. The typical approach used today is to design and develop a website with a <span class=\"custom-italic\">mobile first approach</span>. The mobile first approach\'s purpose is\r\n            for developers to begin designing for the smallest screens first, so there is an improved experience for those end users.\r\n        </p>\r\n        <p>\r\n            This is <span class=\"custom-italic\">progressive advancement</span>, where developers will first build their website for the devices such as a mobile phone with fundamental functions and features. After, developers will build on top of the\r\n            mobile version with more complex features for end users using a tablet or computer. This is the opposite of <span class=\"custom-italic\">graceful degradation</span>, where a developer first builds their website for devices such as a desktop\r\n            with complex features and then removes certain features to make it more friendly for mobile devices.\r\n        </p>\r\n        <p>\r\n            There are a few fundamental techniques that developers utilise when creating responsive web pages:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-italic\">Media queries. </span> This is a feature from CSS3 that allows content to change to different device environments. This is done by styling elements with @media for different screen widths and viewport sizes.\r\n                For example:\r\n                <span class=\"custom-code\">@media screen and (min-width: 700px) {...}</span>\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Responsive media. </span> This is done by having content be flexible. For example, having the size of images and other media change for different screen widths. The size of images and videos can be a percentage\r\n                of the element they are nested in, making them appear responsive. Images and videos should be optimised for their biggest size as their quality will degrade in the browser past that.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Fluid/liquid layout.</span> This makes it easier for developers to design their web pages for numerous sizes, devices, and orientations. Using specific units when sizing elements (%, rem, and em) and using CSS\r\n                layout modules (such as <span class=\"custom-italic\">flexbox</span>, <span class=\"custom-italic\">grids</span>, and <span class=\"custom-italic\">multi-column</span>s) promotes an adaptable, flexible page layout.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Web pages on mobile devices, if automatically scaled down to fit the device\'s screen width, can have an extremely poor user experience due to end users having to pinch and zoom the web page. This is where the\r\n            <span class=\"custom-italic\">viewport meta element </span>comes in! The viewport attribute allows the mobile device\'s viewport to be a specific width.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/&gt;</span>\r\n        </p>\r\n        <p>\r\n            This is placed in the <span class=\"custom-code\">&lt;head&gt;</span> of an HTML document before the style sheet <span class=\"custom-code\">&lt;link&gt;</span>. <span class=\"custom-code\">width=device-width</span> sets the viewport\'s (the browser\r\n            window width) pixel width to be the same as the device\'s screen width. This is so mobile browsers act the same as desktop ones! <span class=\"custom-code\">initial-scale=1</span> specifies that the browser renders the web page at its normal\r\n            size and does not scale it down.\r\n        </p>\r\n    </div>\r\n</div>');
INSERT INTO `content` (`id`, `module`, `section_number`, `section_text`) VALUES
(4, 'webdev', '4', '<button type=\"button\" class=\"clickableSection\">JavaScript &#8595;</button>\r\n<div class=\"content\">\r\n    <div class=\"segment\">\r\n        <p>\r\n            For JavaScript, we will cover:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                What JavaScript is\r\n            </li>\r\n            <li>\r\n                Important concepts\r\n            </li>\r\n            <li>\r\n                Variables\r\n            </li>\r\n            <li>\r\n                Data Types\r\n            </li>\r\n            <li>\r\n                Functions and scope\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            JavaScript? What\'s that?!\r\n        </h3>\r\n        <p>\r\n            JavaScript, sometimes abbreviated to <span class=\"custom-bold\">JS</span>, is an object-oriented scripting language that, along with HTML and CSS, became a fundamental aspect of the World Wide Web. It is used to add interactive features in\r\n            web pages, such as them having complicated animations, clickable sections, interactive menus, and so forth. All of those are executed from within the end user\'s browser and is referred to as <span class=\"custom-italic\">client-side</span> JavaScript.\r\n            There is also\r\n            <span class=\"custom-italic\">server-side</span> JavaScript which is used for back-end runtime environments such as\r\n            <span class=\"custom-bold\">Node.js</span>. This opens a whole new world of possibilities for developers, as now they can use and implement more advanced functionality such as application programming interfaces, back-end services, create web\r\n            applications, and much more! This will not be covered in this JavaScript section, but you should research it in your own time!\r\n        </p>\r\n        <p>\r\n            During the early years of the web, web pages were only <span class=\"custom-italic\">static</span>. This was not ideal as developers could not have any fancy behaviour to enhance their website! In 1995, a computer service company called Netscape\r\n            wanted a scripting language for their web browser Navigator. They chose to work with Sun Microsystems (a technology company) to implement the <span class=\"custom-italic\">Java</span> programming language and also work with Brendan Eich to implement\r\n            the <span class=\"custom-italic\">Scheme</span> programming language.\r\n        </p>\r\n        <p>\r\n            Soon after, Netscape concluded that it would be best for Eich to create a new programming language with Java-like syntax. Therefore, Eich created a new language called <span class=\"custom-italic\">Mocha</span> but the name was then changed\r\n            to <span class=\"custom-italic\">LiveScript</span> when it was released in the Navigator browser\'s beta in September 1995. The name was then finally changed to <span class=\"custom-italic\">JavaScript</span> when officially released later in December.\r\n        </p>\r\n        <p>\r\n            ECMA International, a non-profit standards organisation, is currently responsible for standardising JavaScript. This is done through them standardising ECMAScript, which is a JavaScript standard that gives scripting languages rules and guidelines which\r\n            they must follow to be ECMAScript compliant. A survey done by w3techs, a web technology survey website, has concluded that more than <span class=\"custom-bold\">97% of websites use JavaScript!</span> Every major web browser has a\r\n            dedicated JavaScript engine for executing JavaScript code on an end user\'s device.\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Important concepts\r\n        </h3>\r\n        <p>\r\n            Now, before we get into the juicy stuff, we need to lay down some important stuff about JavaScript.\r\n        </p>\r\n        <p>\r\n            JavaScript is utilised for countless aspects of web development and can be used in many unique ways to achieve exceptional results! Some of the common uses for JavaScript are:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Adding new, or alter the appearance of, HTML elements.\r\n            </li>\r\n            <li>\r\n                Checking the value of forms.\r\n            </li>\r\n            <li>\r\n                Communicating with servers.\r\n            </li>\r\n            <li>\r\n                Responding to an end user\'s action and running code based on that.\r\n            </li>\r\n            <li>\r\n                The use of application programming interfaces, such as the Google Maps and Twitter API .\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            JavaScript programs are referred to as <span class=\"custom-italic\">scripts</span>. Scripts can be written inside an HTML document with the <span class=\"custom-code\">&lt;script&gt;</span> tag, but, like with CSS, this is considered bad practice\r\n            and it is better to have JavaScript in a separate script <span class=\"custom-code\">.js</span> file. Scripts are attached using the <span class=\"custom-code\">src</span> attribute. For example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&lt;script src=\"eduprojectScript.js\"&gt;</span><span class=\"custom-code\">&lt;/script&gt;</span>\r\n        </p>\r\n        <p>\r\n            In that example, <span class=\"custom-code\">eduprojectScript.js</span> is the path to the script file.\r\n        </p>\r\n        <p>\r\n            JavaScript is a <span class=\"custom-italic\">procedural language</span>, which means it describes how things <span class=\"custom-bold\">should be done</span>. This is while HTML and CSS are declarative languages, meaning they describes how things\r\n            <span class=\"custom-bold\">should be</span>. JavaScript is also an <span class=\"custom-italic\">interpreted</span> language, meaning it will read, parse, and translate the source code every time it is executed.\r\n        </p>\r\n        <p>\r\n            It is important to know that JavaScript is a <span class=\"custom-italic\">weakly typed</span> language. This means that, rather than variables having to be a predetermined data type that can only store that type of data (strongly typed), JavaScript\r\n            variables can have data of <span class=\"custom-bold\">any</span> type at any time.\r\n        </p>\r\n        <p>\r\n            For example, the following would return an error for strongly typed languages:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">int eduproject = 77777;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">eduproject = \"eduproject\";</span>\r\n        </p>\r\n        <p>\r\n            While the following would be fine for a weakly typed language:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">var eduproject = 77777;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">eduproject = \"eduproject\";</span>\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Variables everywhere!\r\n        </h3>\r\n        <h4>\r\n            What are they?\r\n        </h4>\r\n        <p>\r\n            This is one of the most significant aspects in all of programming. Variables are things that store data. Developers can use variables to store numbers, text, and other types of data. A variable\'s value can change while the program is running depending\r\n            on what you want to do with it! If we get a tad more specific, a variable is actually a memory location. The variable\'s name is the name linked with that memory location which is holding the data value.\r\n        </p>\r\n        <p>\r\n            Before modern JavaScript (ECMAScript 6) came out in June 2015, you could only create a variable with <span class=\"custom-bold\">var</span>.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">var eduproject = \"EduProject example\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">var number = 10546378;</span>\r\n        </p>\r\n        <p>\r\n            However, after the introduction of modern JavaScript, you can create variables with <span class=\"custom-bold\">let</span> and <span class=\"custom-bold\">const</span>. After you declare a let variable, you can give that variable another value\r\n            later on. With const, you cannot. The following\r\n            <span class=\"custom-bold\">would not</span> return an error:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let letExample = \"Can I be given another value?\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">letExample = \"Yes!\";</span>\r\n        </p>\r\n        <p>\r\n            But the following <span class=\"custom-bold\">would</span> return an error:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">const constExample = \"Can I be given another value?\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">constExample = \"No!\";</span>\r\n        </p>\r\n        <p>\r\n            The majority of upcoming examples will use <span class=\"custom-code\">let</span>.\r\n        </p>\r\n        <h4>\r\n            Creating variables\r\n        </h4>\r\n        <p>\r\n            Getting back to it, the statement beneath declares a variable called text:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let text;</span>\r\n        </p>\r\n        <p>\r\n            We can assign data to it by using <span class=\"custom-code\">=</span>.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">text = \"Hello World!\";</span>\r\n        </p>\r\n        <p>\r\n            This stores the string <span class=\"custom-code\">\"Hello World!\"</span> into the text variable. The string is saved into the memory location linked with the variable. We access the variable by calling its name. Some quick ways to access it\r\n            is by using\r\n            <span class=\"custom-code\">alert</span> to create a browser alert or <span class=\"custom-code\">console.log</span> to output a log to the browser\'s console:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">alert(text);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(text);</span>\r\n        </p>\r\n        <p>\r\n            To minimise the code, we can merge the declaration of the variable and the assignment of the value into one line:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let text = \"Hello World!\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let country = \"UK\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let population = 67220000;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let raining = true;</span>\r\n        </p>\r\n        <p>\r\n            It is also possible to declare multiple variables on one line:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let country = \"UK\", population = 67220000, raining = true;</span>\r\n        </p>\r\n        <h4>\r\n            Naming\r\n        </h4>\r\n        <p>\r\n            There are a few naming restrictions for variables:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                The variable\'s name can only have digits, letters, an underscore (_), and a dollar sign ($).\r\n            </li>\r\n            <li>\r\n                The variable name\'s first character cannot be a digit.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Variable names are case sensitive, so these two variables <span class=\"custom-code\">eduproject</span> and <span class=\"custom-code\">EduProject</span> are two separate variables! Keep this in mind!\r\n        </p>\r\n        <p>\r\n            Also, when a variable name is made of numerous words, developers will typically use <span class=\"custom-italic\">camelCase</span>. This is where each word besides the first starts with a capital letter. For example:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                currentTime\r\n            </li>\r\n            <li>\r\n                leastFavouriteColour\r\n            </li>\r\n            <li>\r\n                whatIsTheWeather\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            This is even used by some companies when naming their products, such as iPhone and eBay!\r\n        </p>\r\n        <p>\r\n            A variable\'s name should be clear and unambiguous by clearly specifying the data it stores. While it might seem meaningless, proper variable naming is a vital for efficient programming!\r\n        </p>\r\n        <h4>\r\n            Arrays\r\n        </h4>\r\n        <p>\r\n            So, what if we wanted something that can to hold more than one value? This is where <span class=\"custom-italic\">arrays</span> come in! An array is a list-like object that can hold numerous values. There are two ways to create an array:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let array = new Array();</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let array = [];</span>\r\n        </p>\r\n        <p>\r\n            Usually, the second syntax is used. This is called an array literal notation and is the current common practice for declaring an array. Do not forget to use a comma to separate the elements in an array!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let countries = [\"UK\", \"USA\", \"Finland\"];</span>\r\n        </p>\r\n        <p>\r\n            So, how do we specify what data in the array we want to target specifically? It\'s actually rather simple! An array\'s data is accessed by an index which starts at <span class=\"custom-bold\">0</span>. Using the previous <span class=\"custom-code\">let countries = [\"UK\", \"USA\", \"Finland\"];</span>            example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(countries[0]);</span> would return the first array elements: \"UK\".\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(countries[1]);</span> would return the second array elements: \"USA\".\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(countries[2]);</span> would return the third array elements: \"Finland\".\r\n        </p>\r\n        <p>\r\n            There are many things you can do with arrays! You can:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Add an element <span class=\"custom-code\">countries[3] = \"Norway\";</span>\r\n            </li>\r\n            <li>\r\n                Replace an element by overwriting the value <span class=\"custom-code\">countries[1] = \"Japan\";</span>\r\n            </li>\r\n            <li>\r\n                Count the amount of elements in an array <span class=\"custom-code\">console.log(countries.length);</span>\r\n            </li>\r\n            <li>\r\n                Print the entire array <span class=\"custom-code\">console.log(countries);</span>\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            As JavaScript is a weakly typed language, JavaScript arrays can have numerous elements of any data type (we will cover different data types in the next section):\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let array = [\"EduProject\", 7, undefined, { project: \'yes\' }, false];</span>\r\n        </p>\r\n        <p>\r\n            One of the most typical uses of arrays is a <span class=\"custom-italic\">queue</span>. A queue is a collection of elements which can do two things: <span class=\"custom-italic\">push</span> and\r\n            <span class=\"custom-italic\">shift</span>. Push will add an element to the end of an array, while shift will remove the first element from an array and return it, so the second element would then become the first.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-code\">Array.unshift()</span> will add an element to start of the array and then return it.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">Array.shift()</span> remove first an element from the array and then return it\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Another typical use of arrays is <span class=\"custom-italic\">using it like a stack</span>. A stack is a data structure with a <span class=\"custom-bold\">last in, first out </span>order, so elements that are newly added are also the first to\r\n            be removed. Elements that are added are <span class=\"custom-italic\">pushed on</span> (like mentioned before) and elements that are removed are <span class=\"custom-italic\">popped off</span>. There are two operations:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-code\">Array.push()</span> which pushes (adds) an element to the end of the array.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">Array.pop()</span> which pops (removes) an element from the end of the array.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            You can also loop over an array using a for...of loop (loops will be covered more in-depth in a later section)!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let array = [\"EduProject\", \"Web App\", \"Project\"];</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">for (element of array) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(element);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <fieldset>\r\n            <legend> An exercise! </legend>\r\n            <p>\r\n                1. Declare two variables: country and population.\r\n            </p>\r\n            <p>\r\n                2. Assign your home country to the country.\r\n            </p>\r\n            <p>\r\n                3. Assign your home country\'s population to population.\r\n            </p>\r\n            <p>\r\n                4. Show your home country and population amount using an alert (research how to show two variables at once)!\r\n            </p>\r\n        </fieldset>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            So many data types!\r\n        </h3>\r\n        <p>\r\n            In JavaScript, a variable\'s value is always one of many data types. You already know of two from the Variables section: a string and a number. Overall, JavaScript has eight basic data types and seven of those are\r\n            <span class=\"custom-italic\">primitive</span>, meaning they are not objects (this is a <span class=\"custom-italic\">non-primitive</span> data type) nor do they have any methods. In this section, we will go through some of the more common ones.\r\n            Due to JavaScript being <span class=\"custom-italic\">weakly typed</span>, variables can store different data types at any time. A variable can be a string and then later be a number.\r\n        </p>\r\n        <h4>\r\n            Strings\r\n        </h4>\r\n        <p>\r\n            We have slightly covered strings already in the earlier sections, but here is where we will get into the nitty-gritty of it!\r\n        </p>\r\n        <p>\r\n            A string is a series of characters. These characters can be anything, from letters, to numbers, to punctuation! While strings are one of the primitive data types, there is something called a\r\n            <span class=\"custom-italic\">string object</span>. JavaScript will automatically transform primitive strings to string objects, but primitive strings and string objects are exchangeable in the majority of situations.\r\n        </p>\r\n        <p>\r\n            Strings in JavaScript can be enclosed within either single or double quotes:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let weather = \'Good\';</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let weather2 = \"Okay\";</span>\r\n        </p>\r\n        <p>\r\n            For string objects, it would be:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let weather = String(\"Good\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let temperature = String(\"12.7\");</span>\r\n        </p>\r\n        <p>\r\n            We can also get numeric values as a string, such as from a form.\r\n        </p>\r\n        <p>\r\n            When developers use a string in arithmetic operations, JavaScript will convert it into a number. However, it is best practice to manually switch the string to a number before using it with <span class=\"custom-code\">parseInt()</span>:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number = \"77\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">number = parseInt(number);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">number = number - 3;</span>\r\n        </p>\r\n        <h4>\r\n            Numbers\r\n        </h4>\r\n        <p>\r\n            The number data type can be both an integer (whole number) or a floating-point number (a number with a decimal place).\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let integer = 77;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let floatingPoint = 77.53463789;</span>\r\n        </p>\r\n        <p>\r\n            With the number data type, you can perform arithmetic operations! Do note that arithmetic operations are performed in <span class=\"custom-bold\">BIDMAS/BODMAS</span> order!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let a = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let b = 5;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(a + b); // 13 (addition)</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(a - b); // 2 (subtraction)</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(a * b); // 35 (multiplication)</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(a / b); // 1.4 (division)</span>\r\n        </p>\r\n        <p>\r\n            ...and so on!\r\n        </p>\r\n        <p>\r\n            The number data type also has three special numeric values: infinity, negative infinity, and NaN.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Infinity: <span class=\"custom-code\">console.log(77 / 0);</span>\r\n            </li>\r\n            <li>\r\n                Negative infinity: <span class=\"custom-code\">console.log(-77 / 0);</span>\r\n            </li>\r\n            <li>\r\n                NaN: <span class=\"custom-code\">console.log(77 / \"text\");</span>\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            You can increment and decrement number variables using the plus and minus signs. Incrementing (++) and decrementing (--) will either increase or decrease a number\'s value by 1.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">number++;</span> means <span class=\"custom-code\">number = number + 1;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">number--;</span> means <span class=\"custom-code\">number = number - 1;</span>\r\n        </p>\r\n        <h4>\r\n            BigInt\r\n        </h4>\r\n        <p>\r\n            There is a limitation with the number data type, though. It cannot store values larger than 9007199254740991 or less than -9007199254740991. You might be scratching your head and thinking\r\n            <span class=\"custom-italic\">\'That\'s an absurd number! Why would anyone need to go over that?!\'</span> and that is a valid train of thought! For the majority of situations, that number is sizeable enough to fulfil the majority of circumstances.\r\n            However, sometimes there is a need for colossal numbers, such as when calculating prime numbers or cryptography.\r\n        </p>\r\n        <p>\r\n            To create a BigInt. You write an <span class=\"custom-code\">n</span> at the end of an integer:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let largeNumber = 267457658901865473897501235674834567890n;</span>\r\n        </p>\r\n        <p>\r\n            Or by using <span class=\"custom-code\">BigInt()</span>:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let largeNumber = BigInt(267457658901865473897501235674834567890);</span>\r\n        </p>\r\n        <h4>\r\n            Boolean\r\n        </h4>\r\n        <p>\r\n            Booleans only have two values, which are <span class=\"custom-italic\">true</span> and <span class=\"custom-italic\">false</span>. Developers will typically use this data type to store yes/correct or no/incorrect values.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let isItSunny = true;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let isItSunny = false;</span>\r\n        </p>\r\n        <p>\r\n            Booleans can also be used for comparisons. The statement below would be, and would return, <span class=\"custom-bold\">true</span>:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let compare = 77 &gt; 33;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(compare);</span>\r\n        </p>\r\n        <p>\r\n            While the statement below would be, and would return, <span class=\"custom-bold\">false</span>:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let compare = 77 &lt; 33;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(compare);</span>\r\n        </p>\r\n        <h4>\r\n            Object\r\n        </h4>\r\n        <p>\r\n            An object is, like briefly said before, a <span class=\"custom-italic\">non-primitive</span> data type. Objects hold a set of properties. An object\'s property can be seen as a variable tied to the object. Properties have a key-value pair, where\r\n            the key/name is a string and the value is anything like a string, integer, Boolean, and so forth. JavaScript objects are created with curly brackets\r\n            <span class=\"custom-code\">{}</span>, for example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let person = {name: \"Joe Bloggs\", age: 37, hasCar: true};</span>\r\n        </p>\r\n        <p>\r\n            In that example, person was an object, the key <span class=\"custom-code\">\"name\"</span> has the value <span class=\"custom-code\">\"Joe Bloggs\"</span>, the key <span class=\"custom-code\">\"age\"</span> has the value <span class=\"custom-code\">37</span>,\r\n            and the key <span class=\"custom-code\">\"hasCar\"</span> has the value <span class=\"custom-code\">true</span>. Properties have the key before the colon\r\n            <span class=\"custom-code\">:</span> and the value after it.\r\n        </p>\r\n        <h4>\r\n            Other types\r\n        </h4>\r\n        <p>\r\n            There are other data types, such as <span class=\"custom-bold\">null </span>which holds an empty value and <span class=\"custom-bold\">undefined</span> which does not have any assigned value. You should research these and their applications in\r\n            your own time!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Controlling the structure\r\n        </h3>\r\n        <p>\r\n            <span class=\"custom-italic\">Control structures</span> are what control the flow of a program\'s executed code. These are grouped into three categories: iteration, selection, and sequence. There are numerous structures that fit into those categories:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                do...while loop\r\n            </li>\r\n            <li>\r\n                for loop\r\n            </li>\r\n            <li>\r\n                if statement\r\n            </li>\r\n            <li>\r\n                if...else statement\r\n            </li>\r\n            <li>\r\n                switch case\r\n            </li>\r\n            <li>\r\n                while loop\r\n            </li>\r\n        </ul>\r\n        <h4>\r\n            Iteration\r\n        </h4>\r\n        <p>\r\n            This is for when a developer needs to execute a statement repeatedly while, or until, a specific condition happens. For example, a developer may need to print items from a list one by one or loop the same code for each number within a number range. These\r\n            iteration control structures include the <span class=\"custom-italic\">while</span>, <span class=\"custom-italic\">do...while</span>, and the <span class=\"custom-italic\">for loop</span>.\r\n        </p>\r\n        <h5>\r\n            While loop\r\n        </h5>\r\n        <p>\r\n\r\n            The <span class=\"custom-bold\">while loop\'s</span> syntax is:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">while (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            While that specific condition is true, the code from the body is executed. For example, this loop will output loopNumber while loopNumber is less than 7:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let loopNumber = 0;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">while (loopNumber &lt; 7) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(loopNumber);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;loopNumber++;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            A single execution of the loop is an <span class=\"custom-italic\">iteration</span>, and the above loop has seven iterations.\r\n        </p>\r\n        <h5>\r\n            Do...while loop\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">do...while loop\'s</span> syntax is similar to the while loop\'s, but the condition can be placed below the loop:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">do {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} while (condition);</span>\r\n        </p>\r\n        <p>\r\n            The loop will first execute the code and will then check the condition. While the condition is true, the code will be executed repeatedly.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let loopNumber = 0;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">do {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(loopNumber);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;loopNumber++;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} while (loopNumber &lt; 7);</span>\r\n        </p>\r\n        <h5>\r\n            For loop\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">for loop</span> has a few more steps to it but is not tricky by any means!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">for (initialise; condition; increment) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            The loop below prints <span class=\"custom-code\">console.log(loopNumber)</span> while loopNumber\'s value is less than 7:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">for (let loopNumber = 0; loopNumber &lt; 7; loopNumber++) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(loopNumber);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-code\">let loopNumber = 0</span> executes once upon entering the loop.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">loopNumber &lt; 7</span> is checked prior to every iteration. If it is false, then the loop will stop.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">console.log(loopNumber);</span> will repeatedly run while the condition is true.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">loopNumber++</span> executes after console.log(loopNumber); on every iteration.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            It\'s important to note that you can put other control structures like another for loop or an if statement inside a for loop!\r\n        </p>\r\n        <h4>\r\n            Selection\r\n        </h4>\r\n        <p>\r\n            This is one of the most common branching structures. Developers will occasionally need to execute specific actions on specific conditions, which is where selection statements come in!\r\n        </p>\r\n        <h5>\r\n            if statement\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">if statement</span> checks a condition and executes code if the result is true. If the condition is not true, then the code will not execute.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            So, for example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (weather = \"Sunny\") {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"It is sunny today!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            The if statement can be paired with an <span class=\"custom-bold\">else clause</span> to create an <span class=\"custom-bold\">if...else</span> statement. Unlike the standard if statement, this else code will execute when the condition is false.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is false</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            So, for example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (weather = \"Sunny\") {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"It is sunny today!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"It is NOT sunny today!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            You can add even more clauses to cover more conditions!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else if {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if another condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is false</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h5>\r\n            Switch statement\r\n        </h5>\r\n        <p>\r\n            Numerous if statements can be replaced by a <span class=\"custom-bold\">switch statement</span>. This gives a clean, concise way for comparing a value with multiple variants.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let switchNumber = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">switch(dayOfTheWeek) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">case 1: </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"Switch case number 1!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;break;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">case 2: </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"Switch case number 2!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;break;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">... </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">default: </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"Default witch case!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">break</span> is used to stop a statement. This can also be used in loops!\r\n        </p>\r\n        <h4>\r\n            Sequence\r\n        </h4>\r\n        <p>\r\n            Unlike the others, this one is quite simple! This is where statements are executed sequentially, which happens to be the default behaviour of JavaScript anyway!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Comparison and logical operators\r\n        </h3>\r\n        <p>\r\n            We have learnt about basic mathematical operators in the Numbers section where we spoke about how to add, subtract, multiply, and divide numbers in JavaScript. However, we can also compare them!\r\n            <span class=\"custom-bold\">Comparison operators</span> allow developers to compare two values and check whether that comparison is true or false (think Boolean!). These values can be logical, numerical, objects, or even strings!\r\n        </p>\r\n        <h4>\r\n            Comparison operators\r\n        </h4>\r\n        <p>\r\n            These comparison operators are the same as the ones from mathematics!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Equal to <span class=\"custom-code\">===</span> or <span class=\"custom-code\">==</span> which will return true if the left value is <span class=\"custom-italic\">equal to</span> the right value.\r\n                <span class=\"custom-code\">===</span> compares two values and <span class=\"custom-bold\">will</span> check the data type, while <span class=\"custom-code\">==</span> compares two values and\r\n                <span class=\"custom-bold\">does not</span> check the data type.\r\n            </li>\r\n            <li>\r\n                Not equal to <span class=\"custom-code\">!==</span> which will return true if the left value <span class=\"custom-italic\">is not equal to</span> the right value.\r\n            </li>\r\n            <li>\r\n                Less than <span class=\"custom-code\">&lt;</span> which will return true if the left value is <span class=\"custom-italic\">less than</span> the right value.\r\n            </li>\r\n            <li>\r\n                Greater than <span class=\"custom-code\">&gt;</span> which will return true if the left value is <span class=\"custom-italic\">greater than</span> the right value.\r\n            </li>\r\n            <li>\r\n                Less than or equal to <span class=\"custom-code\">&lt;=</span> which will return true if the left value is <span class=\"custom-italic\">less than or equal to</span> the right value.\r\n            </li>\r\n            <li>\r\n                Greater than or equal to <span class=\"custom-code\">&gt;=</span> which will return true if the left value is <span class=\"custom-italic\">greater than or equal to</span> the right value.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            An example of these would be:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number1 = 3, number2 = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if(number1 &gt; number2) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"number1 is greater than number2\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else if(number1 &lt; number2) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"number1 is less than number2\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"number1 equals number2\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h4>\r\n            Logical operators\r\n        </h4>\r\n        <p>\r\n            We can also use two, or even more, expressions, check if any expression is true or false, and return a Boolean value based on that. These are called <span class=\"custom-bold\">logical operators. </span> and there are three we will look at:\r\n        </p>\r\n        <h5>\r\n            &amp;&amp;\r\n        </h5>\r\n        <p>\r\n            This is the <span class=\"custom-bold\">and</span> operator and is portrayed as two ampersands. This will only return true if both operands are true.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">true &amp;&amp; true</span> will return true.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">false &amp;&amp; true</span> will return false.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">true &amp;&amp; false</span> will return false.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">false &amp;&amp; false</span> will return false.\r\n        </p>\r\n        <p>\r\n            For example, this will return true:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number1 = 3, number2 = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (number1 == 3 &amp;&amp; number2 == 7) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"True!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"False!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            While this will return false:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number1 = 3, number2 = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (number1 == 1 &amp;&amp; number2 == 7) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"True!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"False!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h5>\r\n            ||\r\n        </h5>\r\n        <p>\r\n            This is the <span class=\"custom-bold\">or </span>operator and is portrayed as two lines. This will return true if any operand is true. If the first operand is true, then it stops checking other operands.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">true &amp;&amp; true</span> will return true.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">false &amp;&amp; true</span> will return true.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">true &amp;&amp; false</span> will return true.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">false &amp;&amp; false</span> will return false.\r\n        </p>\r\n        <p>\r\n            For example, this will return true due to one operand being true:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number = 4;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (number == 2 || number == 4) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"True!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;console.log(\"False!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h5>\r\n            !\r\n        </h5>\r\n        <p>\r\n            This is the <span class=\"custom-bold\">not</span> operator and is portrayed as an exclamation mark. This will invert, or convert then invert, the Boolean value of its operand. The syntax for this is <span class=\"custom-code\">!operand</span>.\r\n        </p>\r\n        <p>\r\n            For example, this will return true as the number variable is not higher than 10:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(!(number &gt; 10));\r\n            </span>\r\n        </p>\r\n        <p>\r\n            But this will return false as the number variable is higher than 1:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let number = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">console.log(!(number &gt; 1));\r\n            </span>\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Functions and scope\r\n        </h3>\r\n        <h4>\r\n            Functions\r\n        </h4>\r\n        <p>\r\n            Functions are the building blocks of JavaScript! This is a segment of code that can be either called upon in other segments of code, a variable referring to the function, or even called upon itself. Functions allow segments of code to be used without\r\n            having to write it over and over. Functions are also objects, so developers can assign them to variables and pass them as parameters to different functions.\r\n            <span class=\"custom-italic\">Parameters</span> are named variables which are given to a function. Parameter variables are used for importing <span class=\"custom-italic\">arguments</span> (the data for parameters) into functions.\r\n        </p>\r\n        <p>\r\n            Functions have many benefits for developers as they can:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Avoid writing duplicate code.\r\n            </li>\r\n            <li>\r\n                Group statements which perform a specific job.\r\n            </li>\r\n            <li>\r\n                Receive parameters and then return a value.\r\n            </li>\r\n            <li>\r\n                Structure code efficiently.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            To define a function, developers use a function <span class=\"custom-italic\">declaration</span>:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">function functionName(parameter1, parameter2) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            First, you name the function, list the parameters (if there are any), and then write the function\'s code. All functions should return a value. <span class=\"custom-code\">return</span> is used for exiting functions and returning a value, while\r\n            <span class=\"custom-code\">undefined</span> is returned by default if there is no return statement!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">function eduProjectMessage() { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;alert(\"Welcome!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">function addition(parameter1, parameter2) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;return number1 + number2;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            To call a function, you call its name:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">eduProjectMessage()</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">addition(3, 7)</span>\r\n        </p>\r\n        <p>\r\n            There is also a <span class=\"custom-italic\">function expression</span>. This is where a function is created in the middle of an expression and is assigned to a variable. These are, usually, anonymous (they do not have a name)! Named functions\r\n            are usually used if developers want to reuse them, and anonymous functions are usually used if developers do not want to reuse them. Naming functions gives the code more readability while anonymous functions make the code more concise. An\r\n            example of an anonymous function is:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let n1 = 3, n2 = 7;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let addition = function(number1, number2) { </span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;return number1 + number2;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p><span class=\"custom-code\">console.log(addition(n1, n2));</span>\r\n        </p>\r\n        <p>\r\n            With modern JavaScript, developers can use the <span class=\"custom-italic\">arrow function </span>to write functions in a more concise syntax!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let addition = (number1, number2) =&gt; number1 + number2;</span>\r\n        </p>\r\n        <h4>\r\n            Scope\r\n        </h4>\r\n        <p>\r\n            A function or variables <span class=\"custom-italic\">scope</span> decides where they are reachable by other bits of code. Functions and variables that are declared <span class=\"custom-italic\">outside</span> of a function have\r\n            <span class=\"custom-italic\">global scope</span>, meaning they are reachable in all places. Functions and variables that are declared <span class=\"custom-italic\">inside</span> a function have\r\n            <span class=\"custom-italic\">local scope</span>, also known as <span class=\"custom-italic\">function scope</span>, meaning they are only reachable within that function they are declared in.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">let globalScope = \"I am global!\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">function foo() {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;let localScope = \"I am local!\";</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            The best practice is for developers to avoid using global functions and variables. This is because they can bloat the global namespace and can clash with later functions and variables!\r\n        </p>\r\n    </div>\r\n</div>');
INSERT INTO `content` (`id`, `module`, `section_number`, `section_text`) VALUES
(15, 'java', '1', '<div class=\"white-box\">\r\n    <h2>\r\n        Some history firstâ€¦\r\n    </h2>\r\n    <p>\r\n        <span class=\"custom-bold\">Java</span> started being created in June 1991 by James Gosling, Mike Sheridan, and Patrick Naughton. Their goal was to design a language for interactive television, but their created language was too sophisticated for\r\n        the television industry at that time. Originally, their language was named â€˜Oakâ€™ after an oak tree beside Gosling\'s office. The language was then known as â€˜Greenâ€™ before finally becoming what we all know today: Java! Java was designed with a syntax\r\n        style like C and C++, so system and application programmers would quickly be accustomed to this new language.\r\n    </p>\r\n    <p>\r\n        <span class=\"custom-italic\">Sun Microsystems</span>, an American technology company, launched the first public version of Java as <span class=\"custom-bold\">Java 1.0</span> in 1996. Java was famously promoted as a <span class=\"custom-italic\">â€˜write once, run anywhereâ€™ </span>language\r\n        to advocate Javaâ€™s cross-platform benefits. Many main web browsers began adding the ability to run small Java applications (known as applets) within web pages, and this boosted Javaâ€™s popularity! In 1997, Sun Microsystems contacted the ISO/IEC\r\n        JTC 1 standards body and Ecma International to formalise standardisation for Java, but this never bore any fruit. Java currently stays as a de facto standard and is managed via the Java Community Process. This means that Java is an accepted programming\r\n        language used throughout the industry, despite never being officially standardised.\r\n    </p>\r\n    <p>\r\n        In April 2009, an American multinational computer technology corporation called <span class=\"custom-bold\">Oracle</span> bought Sun Microsystems for $7.4 billion dollars! However, Oracle was dedicated to keeping Java relevant. Oracle proclaimed\r\n        itself as the â€˜steward of Java technologyâ€™, with an unyielding dedication for cultivating a community built on contribution and openness.\r\n    </p>\r\n</div>'),
(16, 'java', '2', '<button type=\"button\" class=\"clickableSection\">The ins and outs! &#8595;</button>\r\n<div class=\"content\">\r\n    <div class=\"segment\">\r\n        <p>\r\n            For this section, we will cover various aspects which include:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                The syntax of Java\r\n            </li>\r\n            <li>\r\n                Variables\r\n            </li>\r\n            <li>\r\n                Java\'s data types\r\n            </li>\r\n            <li>\r\n                The control structure\r\n            </li>\r\n            <li>\r\n                Access modifiers\r\n            </li>\r\n            <li>\r\n                Mathematic operators\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Letâ€™s get the basics!\r\n        </h3>\r\n        <p>\r\n            A java program is really just a set of instructions for the computer to read! However, the instructions are constructed in a particular way. As a developer, it is vital to be vigilant about punctuation and spelling!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Knowing the syntax!\r\n        </h3>\r\n        <p>\r\n            Java programs can be, are usually are, seen as a collection of <span class=\"custom-bold\">objects</span> that speak to each other by using the <span class=\"custom-bold\">methods</span> of one another. But what exactly are objects and methods?\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                An <span class=\"custom-bold\">object</span> has behaviours and states. For example, a car has various\r\n                <span class=\"custom-italic\">states</span> like its name, colour, brand, model. It also has <span class=\"custom-italic\">behaviours</span>, such as driving, reversing, refuelling, and so forth. An object is an instantiation of a specific\r\n                class. An object is also an <span class=\"custom-bold\">instance</span> of a class.\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">class</span> is like a template or a blueprint that defines the behaviour and state that an object of its type can support.\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">method</span> is like a behaviour. A class can have several methods, and this is where logic is written, data can be managed, and all actions are executed.\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">constructor </span>is a method used to initialise objects. Constructors are called when a class object is created, and it can set object attribute values.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-bold\">Instance variables</span> are variables which have been defined in a class outside a method, constructor, or a block.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Now its time for an example of a simple Java program! We will use the classic <span class=\"custom-code\">Hello World!</span> example:\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            public class EduprojectHelloworld {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String []args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World from EdurProject!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p>\r\n            This will print <span class=\"custom-italic\">â€˜Hello World from EduProject!â€™</span> when the program is compiled and run! Letâ€™s dissect what we just wrote.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-bold\">Public class </span> means that that the classâ€™s access is public, therefore it is visible to all other classes.<span class=\"custom-bold\"></span>\r\n            </li>\r\n            <li>\r\n                For <span class=\"custom-bold\">public static void main(String []args)</span>, <span class=\"custom-bold\">public </span>means this method can be called from outside of the class it is in, <span class=\"custom-bold\">static</span> means developers\r\n                do not need to make an instance to access it, <span class=\"custom-bold\">void </span>means the method does not return any specific value, <span class=\"custom-bold\">main </span>is the method name, and <span class=\"custom-bold\">String args[] </span>means\r\n                a String argument is accepted when the program is run.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-bold\">System.out.println </span> is used for printing an argument that is given to it.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            It is important to know that a Java application starts from the main() method, so this is mandatory!\r\n        </p>\r\n        <p>\r\n            Everything in Java has to have a <span class=\"custom-bold\">name </span>(or an <span class=\"custom-bold\">identifier</span>). This can be a package, class, interface, method, or variable. However, there are rules to what you can name something!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                When naming something, the identifierâ€™s first character <span class=\"custom-italic\">has to be a letter,\r\n                currency character like $, or an underscore</span>. Afterwards, identifiers are allowed to any mixture of characters.\r\n            </li>\r\n            <li>\r\n                An identifierâ€™s name <span class=\"custom-italic\">cannot be the same as a keyword</span>. This is including but not limited to: abstract, Boolean, break, byte, const, default, enum, final, public, return, and void.\r\n            </li>\r\n            <li>\r\n                Identifiers are <span class=\"custom-italic\">case sensitive</span>. <span class=\"custom-code\">EduProject</span> and <span class=\"custom-code\">eduproject</span> are two different identifiers!\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Various Variables!\r\n        </h3>\r\n        <p>\r\n            In Java, variables allow developers to save values and give those values names. This allows them to use those values in numerous places in a program! To use a variable, it must be declared. This means that you must tell Java:\r\n        </p>\r\n        <ol>\r\n            <li>What type of value it can hold (a String, integer, an array, and so forth)</li>\r\n            <li>Its name</li>\r\n        </ol>\r\n        <p>\r\n            For example: <span class=\"custom-code\">String name = \"EduProject\"; and int number = 73;</span>\r\n        </p>\r\n        <p>\r\n            Once a variable is declared, it can be used it in many situations like calculations! We can also give a new value to a variable by using assignment statements.\r\n        </p>\r\n        <p>\r\n            There are three variable types in Java:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-italic\">Class/Static variables</span>\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Instance variables</span>\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Local variables</span>\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            <span class=\"custom-bold\"></span>\r\n        </p>\r\n        <p>\r\n            <h4>Class/Static Variables</h4>\r\n        </p>\r\n        <p>\r\n            These variables can also be referred to as <span class=\"custom-italic\">static</span> variables and are created with the <span class=\"custom-italic\">static</span> keyword in a class, but outside any code blocks, constructors, or methods. Class\r\n            variables are seldom used other than being constants (final, static, public, and private variables) and never switch from their original value. Unlike instance and local variables, class variables get created when the program begins and are\r\n            destroyed when ending the program. A class variable also has a default value depending on what type the variable is:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                For Booleans, the default value is false.\r\n            </li>\r\n            <li>\r\n                For integers, the default value is 0.\r\n            </li>\r\n            <li>\r\n                For object references, the default value is null.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            When creating public static final class variables, the variableâ€™s name is usually in capital letters.\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            public class ClassVariable {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;private static double exampleVariable1;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static final String EXAMPLEVARIABLE2 = \"EduProject!\";\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h4>Instance Variables</h4>\r\n        <p>\r\n            These variables are declared in a class, but outside any code blocks, constructors, or methods. These variables are made when an object of a class gets created and are later destroyed when that object gets destroyed. Instance variables are visible for all code blocks, constructors, or methods in the class\r\n            they are in.\r\n        </p>\r\n        <p>\r\n            Like class variables, an instance variable has a default value!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                For Booleans, the default value is false.\r\n            </li>\r\n            <li>\r\n                For integers, the default value is 0.\r\n            </li>\r\n            <li>\r\n                For object references, the default value is null.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            When assigning a value to an instance variable, this can be done in either the declaration or inside the constructor.\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            class InstanceVariable {\r\n            </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public String instancevariable;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public InstanceVariable() {\r\n            </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;this.instancevariable = \"EduProject!\";\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h4>Local Variables</h4>\r\n        <p>\r\n            These variables are declared in code blocks, constructors, or methods. These are made when the code block, constructor, or method gets used, and the local variables will get destroyed once the code block, constructor, or method is exited. Local variables\r\n            are only visible in the code block, constructor, or method in which they were declared. It should be noted that local variables have no default value, so they should be declared with an initial value! In the example below, animalAge is a local\r\n            variable and its scope is limited the method it was made in <span class=\"custom-code\">(animalAge()</span>).\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            public class animal {\r\n            </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void animalAge() {\r\n            </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int animalAge = 0;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;animalAge = animalAge + 10;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The animalâ€™s age is \" + animalAge + â€œ years old!â€);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            So many data types!\r\n        </h3>\r\n        <p>\r\n            In Java, a value must always be a specific chosen type. There are eight <span class=\"custom-italic\">primitive data types</span>, which means they are not objects nor do they have any methods. There are a few <span class=\"custom-italic\">non-primitive data types</span>,\r\n            such as Arrays, Classes, and Strings.\r\n        </p>\r\n        <h4>Primitive data types</h4>\r\n        <p>\r\n            There are a wide variety of primitive data types, although most are to do with numbers!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                A <span class=\"custom-bold\">Boolean</span>, which stores either a true or false value\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">byte</span>, which stores whole numbers ranging from -128 to 127\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">char</span>, which can store a single character\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">double</span>, which stores fractional numbers of up to 15 decimal places\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">float</span>, which stores fractional numbers of up to 7 decimal places\r\n            </li>\r\n            <li>\r\n                An <span class=\"custom-bold\">int</span>, which stores whole numbers ranging from -2,147,483,648 to 2,147,483,647\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">long</span>, which stores whole numbers ranging from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">short</span>, which stores whole numbers ranging from -32,768 to 32,767\r\n            </li>\r\n        </ul>\r\n        <h4>Non-primitive data types</h4>\r\n        <p>\r\n            There are also a few non-primitive data types!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                An <span class=\"custom-bold\">array</span>, which stores numerous values within one variable\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">Class</span>, which we already know about!\r\n            </li>\r\n            <li>\r\n                A <span class=\"custom-bold\">String</span>, which stores text\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Controlling Javaâ€™s structure\r\n        </h3>\r\n        <p>\r\n            Similar to Web Development, <span class=\"custom-italic\">control structures</span> are what control the flow of a programâ€™s executed code. These are grouped into three categories: iteration, selection, and sequence. In Java, there are numerous\r\n            structures that fit into those categories:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                doâ€¦while loop\r\n            </li>\r\n            <li>\r\n                for loop\r\n            </li>\r\n            <li>\r\n                if statement\r\n            </li>\r\n            <li>\r\n                ifâ€¦else statement\r\n            </li>\r\n            <li>\r\n                switch case\r\n            </li>\r\n            <li>\r\n                while loop\r\n            </li>\r\n        </ul>\r\n        <h4>Iteration</h4>\r\n        <p>\r\n            This is when a developer needs to execute a statement repeatedly while, or until, a specific condition happens. For example, printing items from a list one by one or looping the same code for each number within a number range. These constructs include\r\n            the while, doâ€¦while, and the for loop.\r\n        </p>\r\n        <h5>\r\n            While loop\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">while loopâ€™s</span> syntax is:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">while (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            While that specific condition is true, the code from the body is executed.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">public class WhileLoop {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;public static void main(String args[]) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;int number = 10;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;while(number &lt; 7) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;System.out.print(\"The value of â€˜numberâ€™ is \" + number);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;number++;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            A single execution of the loop is an <span class=\"custom-italic\">iteration</span>, and the above loop has seven iterations.\r\n        </p>\r\n        <h5>\r\n            Do...while loop\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">doâ€¦while loopâ€™s</span> syntax is similar to the while loopâ€™s, but the condition can be placed below the loop:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">do {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} while (condition);</span>\r\n        </p>\r\n        <p>\r\n            The loop will first execute the code and will then check the condition. While it true, it will be executed repeatedly.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">public class DoWhileLoop {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;public static void main(String args[]) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;int number = 0;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;do {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.print(\"The value of â€˜numberâ€™ is \" + number);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;number++;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;} while (number &lt; 100);</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h5>\r\n            For loop\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">for loop</span> has a few more steps to it but is not tricky by any means!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">for (initialise; condition; increment) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to loop</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            The loop below runs console.log(loopNumber) for loopNumber from 0 up until 7:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">public class ForLoop {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;public static void main(String args[]) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;for(int loopNumber = 0; loopNumber &lt; 7; loopNumber++) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.print(\"â€™loopnumberâ€™ value is \" + x );</span>\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;}</span>\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}</span>\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            }</span>\r\n        </p>\r\n        <ul type=\"disc\">\r\n            <li>\r\n                <span class=\"custom-code\">int loopNumber = 0</span> executes once upon entering the loop.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">loopNumber &lt; 7</span> is checked prior to every iteration. If it is false, then the loop will stop.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">System.out.print(\"loopnumber value is \" + x );</span> will repeatedly run while the condition is true.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-code\">loopNumber++</span> is executes after console.log(loopNumber); on every iteration.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            You can also put other control structures like another for loop or an if statement inside a for loop!\r\n        </p>\r\n        <h4>\r\n            Selection\r\n        </h4>\r\n        <p>\r\n            This is one of the most common branching structures. Developers will occasionally need to execute specific actions on specific conditions, which is where selection statements come in!\r\n        </p>\r\n        <h5>\r\n            if statement\r\n        </h5>\r\n        <p>\r\n            The <span class=\"custom-bold\">if statement</span> checks a condition and executes code if the result is true. If the condition is not true, then the code will not execute.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            So, for example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">public class IfStatement {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;public static void main(String args[]) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;int number = 5;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;if(number &lt; 10) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.print(\"â€™Numberâ€™ is less than 10!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            The if statement can be paired with an <span class=\"custom-bold\">else clause </span>to create an <span class=\"custom-bold\">ifâ€¦else</span> statement. Unlike the standard if statement, this else code will execute when the condition is false.\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is false</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            So, for example:\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">public class ElseIfStatement {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;public static void main(String args[]) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;int number = 5;</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;if(number &lt; 10) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.print(\"â€™Numberâ€™ is less than 10!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.print(\"â€™Numberâ€™ is NOT less than 10!\");</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;}</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <p>\r\n            You can add even <span class=\"custom-italic\">more </span>clauses to cover more conditions!\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">if (condition) {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else if {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if another condition is true</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">} else {</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">&emsp;&emsp;// code to execute if the condition is false</span>\r\n        </p>\r\n        <p>\r\n            <span class=\"custom-code\">}</span>\r\n        </p>\r\n        <h5>\r\n            Switch statement\r\n        </h5>\r\n        <p>\r\n            Numerous if statements can be replaced by a <span class=\"custom-bold\">switch statement</span>. This gives a more clean and concise way for comparing a value with multiple variants.\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            public class SwitchStatement {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String args[]) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;String day = \'Monday\';\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;switch(grade) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;case \"Monday\":\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println(\"Today is Monday!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;break;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;case \"Tuesday\":\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println(\"Today is Tuesday!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;break;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;case \"Wednesday\":\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println(\"Today is Wednesday!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;break;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;default:\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println(\"Today is not either Monday, Tuesday, or Wednesday!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;break;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p>\r\n            <span class=\"custom-code\">break</span> is used to stop a statement. This can also be used in loops!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Altering the access!\r\n        </h3>\r\n        <p>\r\n            In Java, developers can use <span class=\"custom-italic\">modifiers</span> to change meanings of constructors, classes, methods, and variables. There are two types:<span class=\"custom-bold\">Java Access Modifiers</span> and <span class=\"custom-bold\">Non-Access Modifiers. </span>\r\n        </p>\r\n        <h4>Access Control Modifiers</h4>\r\n        </p>\r\n        <p>\r\n            Java supplies many access modifiers to establish access levels for constructors, classes, methods, and variables:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-italic\">Nothing â€“ </span> This is where the developer does not specify anything, so the constructor, class, method, or variable is visible to the package.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Private - </span> The constructor, class, method, or variable is only visible to the class.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Public - </span> The constructor, class, method, or variable is visible to everything.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Protected - </span> The constructor, class, method, or variable is only visible to the package it is in and all its subclasses.\r\n            </li>\r\n        </ul>\r\n        <h4>Non-Access Modifiers</h4>\r\n        </p>\r\n        <p>\r\n            Java also supplies many non-access modifiers to establish various additional functionalities:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                <span class=\"custom-italic\">Static</span>, which is for making class methods and variables.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Final</span>, which is for finalising a class, method, or variableâ€™s implementation.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Abstract</span>, which is used for making an abstract class or method.\r\n            </li>\r\n            <li>\r\n                <span class=\"custom-italic\">Synchronized</span> and <span class=\"custom-italic\">volatile</span>, which are both used for threads.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            Below is an example of the different types we just went over!\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            private boolean eduProjectBoolean;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            protected static final double eduProjectDouble = 73;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            static final double eduProjectInteger = 3.7;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            public static void main(String[] arguments) { ... }\r\n            </span></p>\r\n        </span>\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Time for maths!\r\n        </h3>\r\n        <p>\r\n            Java isnâ€™t just for printing text; it also performs a wide range of extensive mathematical operations! Do note that these are performed in BIDMAS/BODMAS order!\r\n        </p>\r\n        <h4>\r\n            Arithmetic Operators\r\n        </h4>\r\n        <p>\r\n            Java can perform simple operations such as addition, subtraction, multiplication, division, and the modulo operation.\r\n        </p>\r\n        <h5>\r\n            Addition\r\n        </h5>\r\n        <p><span class=\"custom-code\">\r\n            class Add {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 4, number2 = 5, total;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;total = number1 + number2;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The add total is \" + total);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h5>\r\n            Subtraction\r\n        </h5>\r\n        <p><span class=\"custom-code\">\r\n            class Subtract {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 12, number2 = 4, total;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;total = number1 - number2;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The subtract total is \" + total);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h5>\r\n            Multiplication\r\n        </h5>\r\n        <p><span class=\"custom-code\">\r\n            class Multiply {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 34, number2 = 234, total;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;total = number1 * number2;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The multiply total is \" + total);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h5>\r\n            Division\r\n        </h5>\r\n        <p><span class=\"custom-code\">\r\n            class Divide {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 100, number2 = 9, total;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;total = number1 / number2;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The divide total is \" + total);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h5>\r\n            Modulo\r\n        </h5>\r\n        <p><span class=\"custom-code\">\r\n            class Modulo {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 5, number2 = 3, total;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;total = number1 % number2;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The modulo total is \" + total);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h4>\r\n            Comparison Operators\r\n        </h4>\r\n        <p>\r\n            We can compare values! Comparison operators allow developers to compare two values and check whether that comparison is true or false. These values can be logical, numerical, objects, or even strings!\r\n        </p>\r\n        <p>\r\n            These operators are the same as the ones from mathematics!\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Equal to <span class=\"custom-code\">==</span> which will return true if the left value is <span class=\"custom-italic\">equal to</span> the right value.\r\n            </li>\r\n            <li>\r\n                Not equal to <span class=\"custom-code\">!==</span> which will return true if the left value <span class=\"custom-italic\">is not equal to</span> the right value.\r\n            </li>\r\n            <li>\r\n                Less than <span class=\"custom-code\">&lt;</span> which will return true if the left value is <span class=\"custom-italic\">less than</span> the right value.\r\n            </li>\r\n            <li>\r\n                Greater than <span class=\"custom-code\">&gt;</span> which will return true if the left value is <span class=\"custom-italic\">greater than</span> the right value.\r\n            </li>\r\n            <li>\r\n                Less than or equal to <span class=\"custom-code\">&lt;=</span> which will return true if the left value is <span class=\"custom-italic\">less than or equal to</span> the right value.\r\n            </li>\r\n            <li>\r\n                Greater than or equal to <span class=\"custom-code\">&gt;=</span> which will return true if the left value is <span class=\"custom-italic\">greater than or equal to</span> the right value.\r\n            </li>\r\n        </ul>\r\n        <p>\r\n            An example of these would be:\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            public class Comparisons {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number1 = 77;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;int number2 = 333;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 != number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 &lt; number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 &lt;= number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 == number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 &gt; number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(number1 &gt;= number2);\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <h4>\r\n            Logical Operators\r\n        </h4>\r\n        <p>\r\n            We can also use two, or even more, expressions, check if any expression is true or false, and return a Boolean value based on that. These are called logical operators. There are three we will look at:\r\n        </p>\r\n        <h5>&amp;&amp;</h5>\r\n        <p>\r\n            This is the and operator and is portrayed as two ampersands. This will only return true if both operands are true.\r\n        </p>\r\n        <h5>||</h5>\r\n        <p>\r\n            This is the or operator and is portrayed as two lines. This will return true if any operand is true. If the first operand is true, then it stops checking other operands.\r\n        </p>\r\n        <h5>!</h5>\r\n        <p>\r\n            This is the not operator and is portrayed as an exclamation mark. This will invert, or convert then invert, the Boolean value of its operand. The syntax for this is !operand.\r\n        </p>\r\n    </div>\r\n</div>');
INSERT INTO `content` (`id`, `module`, `section_number`, `section_text`) VALUES
(17, 'java', '3', '<button type=\"button\" class=\"clickableSection\">Object oriented! &#8595;</button>\r\n<div class=\"content\">\r\n    <div class=\"segment\">\r\n        <p>\r\n            For this section, we will cover various aspects which include:\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                What object-oriented is\r\n            </li>\r\n            <li>\r\n                Abstraction\r\n            </li>\r\n            <li>\r\n                Encapsulation\r\n            </li>\r\n            <li>\r\n                Inheritance\r\n            </li>\r\n            <li>\r\n                Polymorphism\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <p>\r\n            So, Java is an <span class=\"custom-bold\">object-oriented programming language</span>. More specifically, this is a programming <span class=\"custom-italic\">paradigm</span> (pattern or model) that is established on the idea of <span class=\"custom-italic\">objects</span>,\r\n            which can include <span class=\"custom-italic\">code</span> and <span class=\"custom-italic\">data</span>. The <span class=\"custom-italic\">code</span> is represented as <span class=\"custom-italic\">procedures</span>, commonly known as <span class=\"custom-italic\">methods</span>,\r\n            and the <span class=\"custom-italic\">data</span> is represented as <span class=\"custom-italic\">fields</span>, commonly known as <span class=\"custom-italic\">attributes</span> or <span class=\"custom-italic\">properties</span>. While there are\r\n            various object-oriented programming languages, the highly prevalent ones are <span class=\"custom-italic\">class-based</span>, so objects are instances of classes.\r\n        </p>\r\n        <p>\r\n            Object-oriented programming has four fundamental ideas: <span class=\"custom-italic\">abstraction</span>, <span class=\"custom-italic\">encapsulation</span>, <span class=\"custom-italic\">inheritance</span>, and <span class=\"custom-italic\">polymorphism</span>.\r\n            We will go through them all here!\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Abstraction\r\n        </h3>\r\n        <p>\r\n            Within object-oriented programming, <span class=\"custom-bold\">abstraction</span> is where implementation details are hidden from the user, with just the functionality being provided to them. This means the user will only get information on\r\n            what a certain object <span class=\"custom-italic\">does</span> and not <span class=\"custom-italic\">how</span> it does it. In Java, this is done using <span class=\"custom-italic\">abstract classes</span> or <span class=\"custom-italic\">abstract interfaces.</span>\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                An <span class=\"custom-italic\">abstract class</span> is a class that canâ€™t be used to create an object. In order to gain access to it, it has to be inherited from a separate class. Abstract classes can have either an abstract or a normal\r\n                method.\r\n            </li>\r\n            <li>\r\n                An <span class=\"custom-italic\">abstract method</span> can only get used in the aforementioned abstract class. This abstract method does not have a body as its body will be provided by the subclass it was inherited from.\r\n            </li>\r\n        </ul>\r\n        <p><span class=\"custom-code\">\r\n            // This is an abstract class\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            abstract class Car {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            // This is an abstract method\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            public abstract void carSound();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;// This is a normal method\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void drive() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"Vroom\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            // The subclass inherits from Car\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class Ford extends Car {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void carSound() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;// carSound()â€™s body gets provided\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The ford car goes hummm\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class Main {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;Ford myFord = new Ford (); // This creates a Ford object\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;myFord.carSound();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;myFord.drive();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Encapsulation\r\n        </h3>\r\n        <p>\r\n            Within object-oriented programming, <span class=\"custom-bold\">encapsulation</span> is where specific, sensitive data gets concealed. In Java, a classâ€™s variables will get concealed from other classes, and those variables can only get accessed\r\n            via the methods of the class they are in. When classes do not allow direct access to its private data, then encapsulation has been done successfully.\r\n        </p>\r\n        <p>\r\n            For encapsulation to happen, a developer must:\r\n        </p>\r\n        <ol>\r\n            <li>\r\n                Declare a variable as private\r\n            </li>\r\n            <li>\r\n                Create <span class=\"custom-italic\">setter</span> and <span class=\"custom-italic\">getter</span> methods to use the aforementioned variable.\r\n            </li>\r\n        </ol>\r\n        <p><span class=\"custom-code\">\r\n            public class Encapsulation {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            private String text;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            private int number;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public String getText() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;return text;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public String getNumber() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;return number;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void setText(String newText) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;text = newText;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void setNumber(int newNumber) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;number = newNumber;\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Inheritance\r\n        </h3>\r\n        <p>\r\n            Within object-oriented programming, <span class=\"custom-bold\">inheritance</span> is when a class gets the properties, such as the methods and fields, of another class. The class inheriting the properties of the other class is called a\r\n            <span class=\"custom-italic\">subclass</span> while the class whose properties are being inherited from is called the <span class=\"custom-italic\">superclass</span>. In Java, the keyword <span class=\"custom-bold\">extends</span> is used to inherit\r\n            the properties of another class. It actually is that simple!\r\n            </span>\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            class SuperClass {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;// Superclass code\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class SubClass extends SuperClass {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;// Subclass code\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n    </div>\r\n\r\n    <div class=\"segment\">\r\n        <h3>\r\n            Polymorphism\r\n        </h3>\r\n        <p>\r\n            Within object-oriented programming, <span class=\"custom-bold\">polymorphism</span> is when an object can have numerous forms. This is similar to the aforementioned inheritance While inheritance lets a class inherit attributes and methods from\r\n            another class,\r\n            <span class=\"custom-italic\">polymorphism</span> is when those methods are used for performing different tasks. This means that a developer has the possibility to execute the same action in various distinct ways!\r\n        </p>\r\n        <p>\r\n            Here is an example:\r\n        </p>\r\n        <p><span class=\"custom-code\">\r\n            class Vehicle {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void vehicleSound() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The vehicle makes a sound!\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class Truck extends Vehicle {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void vehicleSound() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The truck hisses.\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class Motorbike extends Vehicle {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public void vehicleSound() {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;&emsp;&emsp;System.out.println(\"The motorbike rumbles.\");\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            class Main {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;public static void main(String[] args) {\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;Vehicle myVehicle = new Vehicle(); // Create a Vehicle object\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;Vehicle myTruck = new Truck(); // Create a Truck object\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;Vehicle myMotorbike = new Motorbike(); // Create a Motorbike object\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;myVehicle.vehicleSound();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;myTruck.vehicleSound();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;myMotorbike.vehicleSound();\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            &emsp;&emsp;}\r\n        </span></p>\r\n        <p><span class=\"custom-code\">\r\n            }\r\n        </span></p>\r\n    </div>\r\n</div>');

-- --------------------------------------------------------

--
-- Table structure for table `quiz`
--

CREATE TABLE `quiz` (
  `id` int(11) NOT NULL,
  `question` varchar(2048) DEFAULT NULL,
  `answer1` varchar(2048) DEFAULT NULL,
  `answer2` varchar(2048) DEFAULT NULL,
  `answer3` varchar(2048) DEFAULT NULL,
  `answer4` varchar(2048) DEFAULT NULL,
  `correct` int(11) DEFAULT NULL,
  `module` text
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `quiz`
--

INSERT INTO `quiz` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct`, `module`) VALUES
(1, 'Who co-invented the World Wide Web?', 'Bill Gates', 'Steve Jobs', 'Tim Berners-Lee', 'Mark Zuckerberg', 3, 'webdev'),
(2, 'When was the World Wide Web invented?', '1983', '1989', '1987', '1992', 2, 'webdev'),
(3, 'When was the first web browser written?', '1990', '1989', '1993', '1986', 1, 'webdev'),
(4, 'What was the World Wide Web originally created for?', 'Connecting the world through social media', 'Allowing people to share their work and thoughts with others', 'To make use of HTML documents', 'Sharing scientific documents across networks', 4, 'webdev'),
(5, 'When was the World Wide Web released to the public?', 'March 1990', 'December 1991', 'August 1991', 'April 1989', 3, 'webdev'),
(6, 'What organisation produced standards and suggestions to enhance the World Wide Web\'s quality and secure its interoperability?', 'World Wide Web Corporation', 'World Wide Web Consortium', 'World Wide Web Organisation', 'World Wide Web Company', 2, 'webdev'),
(7, 'What does HTML stand for?', 'HotMail Markup Language', 'HyperTelling Making Language', 'HyperText Making Language', 'HyperText Markup Language', 4, 'webdev'),
(8, 'What do markup languages do?', 'Render the web page', 'Define the web page\'s standards', 'Define the web page\'s structure', 'Stylise the web page', 3, 'webdev'),
(9, 'What do web browsers do?', 'Render a document into a web page', 'Define the web page\'s standards', 'Stylise the web page', 'Define the web page\'s structure', 1, 'webdev'),
(10, 'Why do web browsers recognise outdated tags? ', 'So they can be backwards compatible to adhere to web standards and display websites as intended\r\n', 'They have to by law', 'To promote the use of newer standards', 'To monetise older websites', 1, 'webdev'),
(11, 'What are HTML elements?', 'The standards of HTML documents', 'The syntax of HTML documents', 'The semantics of HTML documents', 'The components of HTML documents', 4, 'webdev'),
(12, 'How many types of HTML elements are there?', '4', '1', '2', '3', 3, 'webdev'),
(13, 'How do developers create HTML elements?', 'Tags', 'Titles', 'Paragraphs', 'JavaScript', 1, 'webdev'),
(14, 'What are HTML tags enclosed in?', '{ }', '< >', '[ ]', '( )', 2, 'webdev'),
(15, 'What is the declaration for the current version of HTML?', '!DOCTYPE html', '!DOCTYPE', 'DOCTYPE html', 'DOCTYPE !html', 1, 'webdev'),
(16, 'What is the current HTML version?', 'HTML4', 'HTML5', 'HTML6', 'HTML2', 2, 'webdev'),
(17, 'What does CSS stand for?', 'Consortium Styling Sheets', 'Consortium Style Sheets', 'Cascading Style Sheets', 'Cascading Styling Sheets', 3, 'webdev'),
(18, 'When was CSS developed?', '1997', '1996', '1995', '1998', 2, 'webdev'),
(19, 'Why was CSS developed?', 'To promote the separation of presentation and content', 'To promote the replacement of HTML', 'To promote the replacement of JavaScript', 'To expand W3C\'s influence', 1, 'webdev'),
(20, 'What is the latest version of CSS?', 'W3C CSS', 'CSS2', 'CSS5', 'CSS3', 4, 'webdev'),
(21, 'What do you use to externally link CSS?', 'The style tag', 'The css tag', 'The script tag', 'The link tag', 4, 'webdev'),
(22, 'What do CSS rules do?', 'They tell the browser how it should show HTML elements', 'They define best standards and practises for CSS', 'They link CSS to HTML', 'They render CSS in the web browser', 1, 'webdev'),
(23, 'What are declaration blocks enclosed in?', '[ ]', '< >', '{ }', '( )', 3, 'webdev'),
(24, 'What is inheritance in CSS?', 'A parent rule using the property values from a child rule', 'A child rule using  the property values from a parent rule', 'A parent use the property values from a child rule', 'Rules using property values from another style sheet', 2, 'webdev'),
(25, 'What is the id selector character in CSS?', '# (hashtag)', '! (exclamation mark)', '. (full stop)', ', (comma)', 1, 'webdev'),
(26, 'What is the class selector character in CSS?', '/ (forward slash)', '# (hashtag)', '. (full stop)', '@ (at symbol)', 3, 'webdev'),
(27, 'What is responsive web design?', 'Websites having interactive features', 'Websites adapting to the device it is shown on', 'Websites reacting quickly', 'Websites being standards-compliant', 2, 'webdev'),
(28, 'What is progressive advancement?', 'Developers building their website for both large and small devices at the same time', 'Developers building their website for large devices first with complex functions and features and then scale down to smaller devices', 'Developers building their website for both large devices only', 'Developers building their website for mobile devices first with fundamental functions and features and then scale to larger devices', 4, 'webdev'),
(29, 'Which one of these is a technique used for creating responsive web pages?', 'Media queries', 'Class selectors', 'JavaScript', 'HTML elements', 1, 'webdev'),
(30, 'Where is the viewport meta element located?', 'In an external style sheet', 'In the body of a HTML document', 'In the head of a HTML document', 'Below the footer of a HTML document', 3, 'webdev'),
(31, 'What does JS stand for?', 'JavaScripts', 'JavaStyle', 'JavaScript', 'JavaSheet', 3, 'webdev'),
(32, 'What is JavaScript used for?', 'Adding elements in web pages', 'Adding media in web pages', 'Adding style in web pages', 'Adding interactivity in web pages', 4, 'webdev'),
(33, 'Who invented JavaScript?', 'Bill Gates', 'Brendan Eich', 'Tim Berners-Lee', 'Microsoft', 2, 'webdev'),
(34, 'Who is currently responsible for standardising JavaScript?', 'Netscape', 'ECMA International', 'Apple', 'Sun Microsystems', 2, 'webdev'),
(35, 'What are JavaScript programs referred to as?', 'Scripts', 'Sources', 'Programs', 'Sheets', 1, 'webdev'),
(36, 'What tag do you use to write JavaScript in HTML?', 'The css tag', 'The link tag', 'The script tag', 'The style tag', 3, 'webdev'),
(37, 'What does a procedural language mean?', 'The language describes how things should be', 'Variables have to be a predetermined data type', 'The language describes how things should be done', 'Variables do not have to be a predetermined data type', 3, 'webdev'),
(38, 'What does a weakly typed language mean?', 'The language describes how things should be done', 'Variables do not have to be a predetermined data type', 'Variables have to be a predetermined data type', 'The language describes how things should be', 2, 'webdev'),
(39, 'What are variables?', 'Scripts', 'A type of HTML element', 'HTML styling', 'Things that store data', 4, 'webdev'),
(40, 'Before modern JavaScript, what was the only way to declare a variable?', 'const', 'var', 'let', 'variable', 2, 'webdev'),
(41, 'How do you output something to the browser\'s console in JavaScript?', 'console.log', 'log.console', 'print.log', 'console.print', 1, 'webdev'),
(42, 'How do you count the amount of elements in an array?', 'array.long', 'array.number', 'array.count', 'array.length', 4, 'webdev'),
(43, 'What index does an array start at?', 'undefined', 'null', '0', '1', 3, 'webdev'),
(44, 'Which one of these is a data type?', 'Number', 'Const', 'Variable', 'CSS', 1, 'webdev'),
(45, 'What do you write at the end of an integer to create a BigInt?', 'big', 'n', 'b', 'bInt', 2, 'webdev'),
(46, 'How many values does a Boolean data type have?', '0', '2', '3', '5', 2, 'webdev'),
(47, 'Which one of these is a non-primitive data type?', 'Null', 'String', 'Object', 'Boolean', 3, 'webdev'),
(48, 'What is not a control structure category?', 'Switch', 'Iteration', 'Selection', 'Sequence', 1, 'webdev'),
(49, 'What logical operator is \'&&\'?', 'and', 'or', 'not', 'also', 1, 'webdev'),
(50, 'What logical operator is \'||\'?', 'also', 'or', 'not', 'and', 2, 'webdev'),
(51, 'What logical operator is \'!\'?', 'or', 'also', 'not', 'and', 3, 'webdev'),
(52, 'What is a function expression?', 'A function created in the middle of an expression', 'A function inside a function', 'A function with a name', 'A function declared in HTML', 1, 'webdev'),
(53, 'What is best practice for scope in JavaScript?', 'Avoiding to use functions in general', 'Avoiding to use local functions and variables', 'Avoiding to use global functions and variables', 'Avoiding to use let and const', 3, 'webdev'),
(55, 'When did development of Java begin?', 'June 1991', 'June 1992', 'January 1991', 'September 1991', 1, 'java'),
(56, 'Who did not help develop Java?', 'James Gosling', 'Tim Berners-Lee', 'Mike Sheridan', 'Patrick Naughton', 2, 'java'),
(57, 'What was Java originally developed for?', 'Mobile devices', 'Interactive television', 'The World Wide Web', 'The Pentagon', 2, 'java'),
(58, 'What was Java\'s original name?', 'Shrub', 'Birch', 'Oak', 'Green', 3, 'java'),
(59, 'What was Java\'s slogan?', 'Write once, use anywhere', 'Develop once, use anywhere', 'Develop once, run anywhere', 'Write once, run anywhere', 4, 'java'),
(60, 'Who currently owns Java?', 'Oracle', 'Sun Microsystems', 'Microsoft', 'ECMA International', 1, 'java'),
(61, 'What can a variable name not start with?', 'A letter', 'An underscore', 'A digit', 'A currency character', 3, 'java'),
(62, 'Which one of these isn\'t a type of variable?', 'Class/Static', 'Instance', 'Local', 'Concrete', 4, 'java'),
(63, 'What is the default value of an integer?', 'null', '0', 'false', 'undefined', 2, 'java'),
(64, 'What is the default value of a Boolean?', 'false', 'true', 'null', 'undefined', 1, 'java'),
(65, 'What is the default value of an object reference?', 'undefined', 'false', 'null', '0', 3, 'java'),
(66, 'How many primitive data types are there?', '8', '6', '10', '11', 1, 'Java'),
(67, 'Which one of these is not an access modifier?', 'Nothing ', 'Protected ', 'Finished', 'Public ', 3, 'java'),
(68, 'What is the scope of the \'Private\' access modifier?', 'The constructor, class, method, or variable is visible to everything.', 'This is where the developer does not specify anything, so the constructor, class, method, or variable is visible to the package.', 'The constructor, class, method, or variable is only visible to the package it is in and all its subclasses.', 'The constructor, class, method, or variable is only visible to the class.', 4, 'java'),
(69, 'What is the scope of the \'Protected\' access modifier?', 'The constructor, class, method, or variable is visible to everything.', 'The constructor, class, method, or variable is only visible to the class.', 'This is where the developer does not specify anything, so the constructor, class, method, or variable is visible to the package.', 'The constructor, class, method, or variable is only visible to the package it is in and all its subclasses.', 4, 'java'),
(70, 'Which of these is not a non-access modifier?', 'public', 'synchronized ', 'static', 'volatile', 1, 'java'),
(71, 'What are the four fundamental ideas of object-oriented programming?', 'Properties, encapsulation, inheritance, and procedures', 'Abstraction, encapsulation, inheritance, and polymorphism', 'Attributes , encapsulation, inheritance, and polymorphism', 'Properties, paradigms, inheritance, and procedures', 2, 'java'),
(72, 'What is abstraction?', 'An object having numerous forms', 'A class gets the properties, such as the methods and fields, of another class', 'Sensitive data gets concealed', 'Implementation details are hidden from the user, with just the functionality being provided to them', 4, 'java'),
(73, 'What is encapsulation?', 'An object having numerous forms', 'Sensitive data gets concealed', 'A class gets the properties, such as the methods and fields, of another class', 'Implementation details are hidden from the user, with just the functionality being provided to them', 2, 'java'),
(74, 'What is inheritance?', 'A class gets the properties, such as the methods and fields, of another class', 'Implementation details are hidden from the user, with just the functionality being provided to them', 'An object having numerous forms', 'Sensitive data gets concealed', 1, 'java'),
(75, 'What is polymorphism?', 'Sensitive data gets concealed', 'Implementation details are hidden from the user, with just the functionality being provided to them', 'An object having numerous forms', 'A class gets the properties, such as the methods and fields, of another class', 3, 'java');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `accounts_details`
--
ALTER TABLE `accounts_details`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `accounts_progress`
--
ALTER TABLE `accounts_progress`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `admin_details`
--
ALTER TABLE `admin_details`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `content`
--
ALTER TABLE `content`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `quiz`
--
ALTER TABLE `quiz`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `accounts_details`
--
ALTER TABLE `accounts_details`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- AUTO_INCREMENT for table `accounts_progress`
--
ALTER TABLE `accounts_progress`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT for table `admin_details`
--
ALTER TABLE `admin_details`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `content`
--
ALTER TABLE `content`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;

--
-- AUTO_INCREMENT for table `quiz`
--
ALTER TABLE `quiz`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=77;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
